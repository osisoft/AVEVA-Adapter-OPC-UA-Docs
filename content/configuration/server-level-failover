---
uid: ServerLevelFailover
---

# Server-level failover
Last UpdatedOct 28, 2023
AdaptersAVEVA Adapter for OPC UA 1.4
To ensure that data continues to flow in the event of a server disconnection or shutdown, you can configure server-level failover for the MQTT Adapter. This ensures a constant connection between the MQTT adapter and at least one MQTT data source at all times.

In general, MQTT Servers communicate with one another to establish, verify, and coordinate a constant, consistent, and robust connection with the MQTT adapter. MQTT Sparkplug B servers coordinate with one another according to the Sparkplug B protocol. There may be some variation on how generic MQTT servers communicate failover messages between servers and connections to clients.

Configure a server-level failover data source
Complete the following steps to configure a server-level failover data source. Use the PUT method in conjunction with the api/v1/configuration/<ComponentId>/RedundantServers REST endpoint to initialize the configuration.

When configuring a server-level failover, you must list one (or more) data sources in the 'RedundantServers' configuration option in the MQTT or MQTTSparkplugB component.

Using a text editor, create an empty text file.

Copy and paste an example configuration for an MQTT data source into the file.

For sample JSON, see Server-level failover.

Update the example JSON parameters for your environment.

For a table of all available parameters, see Server-level failover.

Save the file. For example, as ConfigureRedundantServers.json.

Open a command line session. Change directory to the location of ConfigureRedundantServers.json.

Enter the following cURL command (which uses the PUT method) to initialize the data source configuration.

curl -d "@ConfigureRedundantServers.json" -H "Content-Type: application/json" -X PUT
            "http://localhost:5590/api/v1/configuration/MQTT1/RedundantServers"
         

Notes:

If you installed the adapter to listen on a non-default port, update 5590 to the port number in use.

If you use a component ID other than MQTT1, update the endpoint with your chosen component ID.

Configure data selection.

For more information, see the Data selection (generic).

Server-level data source parameters
The following parameters are available for configuring a server-level failover data source:

Parameter

Required

Type

Description

Filter
Filter
Filter
Filter
HostNameOrIpAddress

Required

string

Host name or IP address of the MQTT server.

Allowed value: Any valid WS or TCP/IP endpoint address
Default value: null

Port

Optional

integer

Port number of the MQTT server. Required only if Protocol is TCP.

Allowed value: Valid port range or null
Default value if Protocol is TCP: 8883
Default value if Protocol is WS: null

Protocol

Optional

enum

The protocol used to communicate to the MQTT broker.

Allowed value: WS or TCP
Default value: TCP

TLS

Optional

enum

Determines if TLS should be used and what version

Allowed value: None, TLS, TLS11, TLS12, TLS13
Default value: TLS12

UserName

Optional

string

User name or client Id for accessing the MQTT server

Allowed value: any string
Default value: null

Password

Optional

string

Password or token for accessing the MQTT server

Note: We recommend using REST to configure the data source when the password must be specified because the adapter will encrypt the password when using REST. If you do not use REST, the plain text password is stored on-disk. You cannot specify a Password without specifying a UserName.

Allowed value: Any string
Default value: null

clientCertificateThumbprint

Optional

string

The thumbprint of the certificate when the MQTT broker requires a client certificate.

Default Value: null

clientCertificatePassword

Optional

string

(Protected) - The password to access the certificate when the MQTT broker requires a client certificate.

Default value: null

ValidateServerCertificate

Optional

boolean

Determines if the server certificate gets validated

Note: A warning is printed in case the server certificate validation is disabled.

Default value: true

serverID

Optional

string

Unique GUID for the MQTT Server.

Server level failover data source examples
The following are examples of valid MQTT server-level failover data source configurations with two redundant servers:

Minimal server-level data source configuration
{

    "HostNameOrIpAddress" : "125.1.1.1" ,

}

{

    "HostNameOrIpAddress" : "125.1.1.2" ,

}

Full data source configuration
A full server configuration with two additional MQTT servers:

{

  "hostNameOrIpAddress": "RedundantServer1",

  "port": "1883",

  "protocol": "Tcp",

  "tls": "None", 

  "userName": null, 

  "password": null, 

  "clientCertificateThumbprint": null, 

  "clientCertificatePassword": null, 

  "validateServerCertificate": false, 

  "serverId": "server1"

}

{

  "hostNameOrIpAddress": "RedundantServer2",

  "port": "1883",

  "protocol": "Tcp",

  "tls": "None", 

  "userName": null, 

  "password": null, 

  "clientCertificateThumbprint": null, 

  "clientCertificatePassword": null, 

  "validateServerCertificate": false, 

  "serverId": "server2"

}
